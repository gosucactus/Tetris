import java.awt.*;
import java.awt.event.*;

public class Tetris extends GameEngine {
	// Entry point for the game
	public static void main(String[] args) {
		createGame(new Tetris(), 30);
	}

	// Board dimensions & playfield
	final int WIDTH = 10;
	final int HEIGHT = 20;
	int[][] grid = new int[WIDTH][HEIGHT];

	// Tile palette
	Color[] tileColors = {black, cyan, blue, orange, yellow, green, pink, red};

	// Score & level
	int playerScore = 0;
	int currentLevel = 1;

	// Active piece state
	int pieceColor = 1;
	int pieceX = WIDTH / 2;
	int pieceY = 0;
	int[][] activeShape = {{0,0}, {0,1}, {1,1}, {1,2}};

	// All seven tetriminos
	int[][][] shapes = {
			{{-1, 0}, {0, 0}, {1, 0}, {2, 0}}, // I
			{{-1, 0}, {0, 0}, {1, 0}, {1, 1}}, // J
			{{-1, 1}, {-1, 0}, {0, 0}, {1, 0}}, // L
			{{0, 0}, {0, 1}, {1, 0}, {1, 1}}, // O
			{{-1, 1}, {0, 1}, {0, 0}, {1, 0}}, // S
			{{-1, 0}, {0, 0}, {1, 0}, {0, 1}}, // T
			{{-1, 0}, {0, 0}, {0, 1}, {1, 1}} // Z
	};

	// Game state flags & menus
	boolean isGameOver = false;
	boolean isPaused = false;
	boolean showHelp = false;
	boolean showCountdown = false;
	boolean isResuming = false;

	int pauseMenuSelection = 0;
	String[] pauseMenuOptions = {"Resume", "Help", "Quit"};

	// Countdown timer
	long countdownStartTime;
	int countdownSeconds = 3;

	// Fall & lock timers
	private double fallInterval = 1.0;
	private double fallTimer = 0.0;
	private final double lockDelay = 0.5;
	private double lockTimer = 0.0;

	// DAS/ARR (Delayed Auto Shift/Auto Repeat, horizontal movement)
	private double dasDelay = 0.15;
	private double arrInterval = 0.05;
	private double leftHeldTime = 0, rightHeldTime = 0;
	private boolean leftHeld = false, rightHeld = false;

	// Soft drop flag
	private boolean softDropping = false;

	// Initialise the game window and board
	public void init() {
		setWindowSize(350, 420);
		clearBoard();
	}

	// Restart game
	public void restartGame() {
		playerScore = 0;
		currentLevel = 1;

		isPaused = false;
		showHelp = false;
		showCountdown = false;
		isGameOver = false;
		pauseMenuSelection = 0;
		clearBoard();
	}

	// Update the game state every frame
	public void update(double dt) {
		double maxDt = 0.1;
		if(dt > maxDt) dt = maxDt;
		if (isGameOver || isPaused || showCountdown) {
			// handle countdown
			if (showCountdown) {
				long elapsed = (long)((System.currentTimeMillis() - countdownStartTime) / (1000 / 1.5));
				if (elapsed >= countdownSeconds) showCountdown = false;
			}
			return;
		}

		// DAS/ARR for L/R movement
		if (leftHeld) {
			leftHeldTime += dt;
			if (leftHeldTime >= dasDelay) {
				// how many repeats?
				int repeats = (int)((leftHeldTime - dasDelay) / arrInterval);
				// only perform new moves
				for (int i=0; i<repeats; i++) moveLeft();
				// subtract consumed time
				leftHeldTime = dasDelay + (leftHeldTime - dasDelay) % arrInterval;
			}
		}
		if (rightHeld) {
			rightHeldTime += dt;
			if (rightHeldTime >= dasDelay) {
				int repeats = (int)((rightHeldTime - dasDelay) / arrInterval);
				for (int i=0; i<repeats; i++) moveRight();
				rightHeldTime = dasDelay + (rightHeldTime - dasDelay) % arrInterval;
			}
		}

		// at top of update(dt):
		double interval = softDropping ? (fallInterval / 20.0) : fallInterval;
		fallTimer += dt;
		while (fallTimer >= interval) {
			fallTimer -= interval;
			if (isLanded()) {
				// on ground, start/increment lock timer
				lockTimer += interval;
				if (lockTimer >= lockDelay) {
					lockTimer = 0;
					lockPiece();
					return;
				}
			} else {
				// still falling
				lockTimer = 0;
				pieceY++;
			}
		}
	}

	// Draw the current frame (required by GameEngine)
	@Override
	public void paintComponent() {
		changeBackgroundColor(black);
		clearBackground(mWidth, mHeight);

		// grid lines
		changeColor(50, 50, 50); // subtle grey
		for (int x = 0; x <= WIDTH; x++) {
			int px = (x + 1) * 20; // because your playfield starts at x+1
			drawLine(px, 0, px, HEIGHT * 20);
		}
		for (int y = 0; y <= HEIGHT; y++) {
			int py = y * 20;
			drawLine(20, py, (WIDTH + 1) * 20, py); // from left wall to right wall
		}

		// draw the border walls
		changeColor(128, 128, 128);
		for (int y = 0; y <= HEIGHT; y++) {
			drawSolidRectangle(1, y * 20 + 1, 18, 18);
			drawSolidRectangle((WIDTH + 1) * 20 + 1, y * 20 + 1, 18, 18);
		}
		for (int x = 0; x < WIDTH; x++) {
			drawSolidRectangle((x + 1) * 20 + 1, HEIGHT * 20 + 1, 18, 18);
		}

		// draw all placed tiles on the board
		for (int y = 0; y < HEIGHT; y++) {
			for (int x = 0; x < WIDTH; x++) {
				changeColor(tileColors[grid[x][y]]);
				drawSolidRectangle((x + 1) * 20 + 1, y * 20 + 1, 18, 18);
			}
		}

		// shows countdown numbers on screen
		if (showCountdown) {
			long elapsed = (long)((System.currentTimeMillis() - countdownStartTime) / (1000 / 1.5));
			long remaining = countdownSeconds - elapsed;

			changeColor(white);
			if (remaining > 0) {
				drawBoldText(150, 200, "" + remaining, 50);
			} else {
				drawBoldText(130, 200, "Go!", 50);
			}
			return;
		}

		// below is the game over screen
		if (isGameOver) {
			// displays "Game Over!", displays final scores and restart instructions
			changeColor(white);
			drawBoldText(90, 130, "Game Over!", 30);
			drawText(80, 170, "Final Score: " + playerScore, 20);
			drawText(80, 190, "Level: " + currentLevel, 20);
			drawText(75, 230, "Press R to restart", 20);
			return;
		}

		// below is help menu
		if (showHelp) {
			// below are the instructions for the game
			changeColor(white);
			drawBoldText(90, 80, "How to Play", 24);
			drawText(50, 120, "← → : Move", 20);
			drawText(50, 150, "↑    : Rotate", 20);
			drawText(50, 180, "↓    : Soft Drop", 20);
			drawText(50, 210, "Space: Hard Drop", 20);
			drawText(50, 240, "Esc  : Pause", 20);
			drawText(50, 280, "Enter: Select Menu Option", 20);
			drawText(50, 330, "(Press Esc to go back)", 16);
			return;
		}

		// below is paused menu
		if (isPaused) {
			// below displays the pause menu options, when a user presses down or up arrow it will highlight the option
			// awaiting the user to press enter to select an option.
			changeColor(white);
			drawBoldText(100, 100, "Game Paused", 24);
			for (int i = 0; i < pauseMenuOptions.length; i++) {
				if (i == pauseMenuSelection) changeColor(yellow);
				else changeColor(white);
				drawText(100, 150 + i * 30, pauseMenuOptions[i], 20);
			}
			return;
		}

		// draw the current falling piece
		for (int[] block : activeShape) {
			int px = pieceX + block[0];
			int py = pieceY + block[1];
			changeColor(tileColors[pieceColor]);
			drawSolidRectangle((px + 1) * 20 + 1, py * 20 + 1, 18, 18);
		}

		// draw the ghost piece (same color for now)
		int[][] ghostBlocks = computeGhostCoordinates();
		changeColor(tileColors[pieceColor]);  // we'll change to semi transparent later
		// pick your normal color
		Color base = tileColors[pieceColor];
		// build a 50%-opaque copy (alpha = 128 out of 255)
		Color translucent = new Color(base.getRed(), base.getGreen(), base.getBlue(), 88); // alpha channel: 0..255
		changeColor(translucent);
		for (int[] block : ghostBlocks) {
			int px = block[0];
			int py = block[1];
			drawSolidRectangle((px + 1) * 20 + 1, py * 20 + 1, 18, 18);
		}

		// draw the score and level
		changeColor(black);
		drawSolidRectangle(WIDTH * 20 + 45, 0, mWidth - WIDTH * 20, mHeight);

		changeColor(white);
		drawText(265, 45, "SCORE:", 18);
		drawText(265, 65, toString(playerScore), 18);
		drawText(265, 85, "Level:", 18);
		drawText(265, 105, toString(currentLevel), 18);
	}

	// Clear the board and start with a new piece
	public void clearBoard() {
		for (int y = 0; y < HEIGHT; y++)
			for (int x = 0; x < WIDTH; x++)
				grid[x][y] = 0;

		spawnPiece(0);
	}

	// Spawn a new tetromino at the top
	public void spawnPiece(int id) {
		pieceX = WIDTH / 2;
		pieceY = 0;

		for (int i = 0; i < 4; i++) {
			activeShape[i][0] = shapes[id][i][0];
			activeShape[i][1] = shapes[id][i][1];
			int tx = pieceX + activeShape[i][0];
			int ty = pieceY + activeShape[i][1];
			// Ends game if new piece overlaps existing blocks
			if (grid[tx][ty] != 0) {
				isGameOver = true;
				return;
			}
		}
		pieceColor = id + 1;
	}

	// Check if the current piece is touching the ground or another piece
	public boolean isLanded() {
		for (int[] block : activeShape) {
			int x = pieceX + block[0];
			int y = pieceY + block[1];
			if (y == HEIGHT - 1 || grid[x][y + 1] != 0) return true;
		}
		return false;
	}

	// Check and clear completed rows, update score and speed
	public void checkCompletedRows() {
		int linesCleared = 0;
		int y = 0;

		while (y < HEIGHT) {
			boolean full = true;
			for (int x = 0; x < WIDTH; x++) {
				if (grid[x][y] == 0) {
					full = false;
					break;
				}
			}

			if (full) {
				linesCleared++;
				for (int row = y; row > 0; row--) {
					for (int x = 0; x < WIDTH; x++) {
						grid[x][row] = grid[x][row - 1];
					}
				}
				for (int x = 0; x < WIDTH; x++) {
					grid[x][0] = 0;
				}
			} else {
				y++;
			}
		}

		int basePoints = 1500;
		switch (linesCleared) {
			case 1 -> playerScore += basePoints * currentLevel;
			case 2 -> playerScore += (basePoints * 2) * currentLevel;
			case 3 -> playerScore += (basePoints * 3) * currentLevel;
			case 4 -> playerScore += (basePoints * 5) * currentLevel;
		}

		int newLevel = (playerScore / 5000) + 1;
		if (newLevel > currentLevel) {
			currentLevel = newLevel;
		}
	}

	// Move the current piece left
	public void moveLeft() {
		for (int[] block : activeShape) {
			int x = pieceX + block[0];
			int y = pieceY + block[1];
			if (x == 0 || grid[x - 1][y] != 0) return;
		}
		pieceX--;
	}

	// Move the current piece right
	public void moveRight() {
		for (int[] block : activeShape) {
			int x = pieceX + block[0];
			int y = pieceY + block[1];
			if (x == WIDTH - 1 || grid[x + 1][y] != 0) return;
		}
		pieceX++;
	}

	// Move the piece down one step or lock it in place
	public void stepDown() {
		if (isLanded()) {
			for (int[] block : activeShape) {
				int x = pieceX + block[0];
				int y = pieceY + block[1];
				grid[x][y] = pieceColor;
			}
			checkCompletedRows();
			spawnPiece(rand(7));
		} else {
			pieceY++;
		}
	}

	// Drop the piece instantly to the bottom
	public void instantDrop() {
		while (!isLanded()) pieceY++;
		for (int[] block : activeShape) {
			int x = pieceX + block[0];
			int y = pieceY + block[1];
			grid[x][y] = pieceColor;
		}
		checkCompletedRows();
		spawnPiece(rand(7));
	}

	public void rotatePiece() {
		// O piece (id=3) does not rotate
		int shapeId = pieceColor - 1;
		if (shapeId == 3) return;

		// Compute pivot (we’ll use block index 1)
		int pivotX = pieceX + activeShape[1][0];
		int pivotY = pieceY + activeShape[1][1];

		// Prepare an array for candidate positions
		int[][] candidate = new int[4][2];

		for (int i = 0; i < 4; i++) {
			// original absolute coords
			int absX = pieceX + activeShape[i][0];
			int absY = pieceY + activeShape[i][1];

			// relative to pivot
			int dx = absX - pivotX;
			int dy = absY - pivotY;

			// 90° rotation
			int ndx = -dy;
			int ndy =  dx;

			// new absolute
			int rx = pivotX + ndx;
			int ry = pivotY + ndy;

			candidate[i][0] = rx;
			candidate[i][1] = ry;
		}

		// Collision check
		for (int i = 0; i < 4; i++) {
			int x = candidate[i][0];
			int y = candidate[i][1];
			// out of bounds?
			if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
				return; // abort rotation
			}
			// colliding with existing blocks?
			if (grid[x][y] != 0) {
				return; // abort rotation
			}
		}

		// 5) Commit rotation:
		// update activeShape to new relative positions
		for (int i = 0; i < 4; i++) {
			activeShape[i][0] = candidate[i][0] - pieceX;
			activeShape[i][1] = candidate[i][1] - pieceY;
		}
//		for (int i = 0; i < 4; i++) { // show current shape
//			System.out.println(activeShape[0][0] + " " + activeShape[0][1]);
//			System.out.println(activeShape[1][0] + " " + activeShape[1][1]);
//			System.out.println(activeShape[2][0] + " " + activeShape[2][1]);
//			System.out.println(activeShape[3][0] + " " + activeShape[3][1]);
//		}
	}

	// Locks the current piece into the grid, clears lines, then spawns a new piece
	// If spawn collides immediately, sets isGameOver = true
	private void lockPiece() {
		// write shape into grid
		for (int[] block : activeShape) {
			int x = pieceX + block[0];
			int y = pieceY + block[1];
			grid[x][y] = pieceColor;
		}

		checkCompletedRows();          // score & level logic
		spawnPiece(rand(7));          // new random piece
	}

	private int[][] computeGhostCoordinates() {
		int ghostY = pieceY;
		while (true) {
			boolean willLand = false;
			for (int[] block : activeShape) {
				int x = pieceX + block[0];
				int y = ghostY + block[1] + 1;
				if (y >= HEIGHT || grid[x][y] != 0) {
					willLand = true;
					break;
				}
			}
			if (willLand) break;
			ghostY++;
		}

		// return a new array of ghost block coordinates
		int[][] ghostBlocks = new int[4][2];
		for (int i = 0; i < 4; i++) {
			ghostBlocks[i][0] = pieceX + activeShape[i][0];
			ghostBlocks[i][1] = ghostY + activeShape[i][1];
		}
		return ghostBlocks;
	}

	// Handle key press inputs
	public void keyPressed(KeyEvent e) {
		if (isGameOver && e.getKeyCode() == KeyEvent.VK_R) {
			restartGame();
			return;
		}
		if (showHelp && e.getKeyCode() == KeyEvent.VK_ESCAPE) {
			showHelp = false; isPaused = true; return;
		}
		if (!showHelp && e.getKeyCode() == KeyEvent.VK_ESCAPE) {
			isPaused = !isPaused; return;
		}
		if (isPaused) {
			// below handles the up/down and enter keys in the pause menu
			if (e.getKeyCode() == KeyEvent.VK_UP)
				pauseMenuSelection = (pauseMenuSelection + pauseMenuOptions.length - 1) % pauseMenuOptions.length;
			else if (e.getKeyCode() == KeyEvent.VK_DOWN)
				pauseMenuSelection = (pauseMenuSelection + 1) % pauseMenuOptions.length;
			else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
				switch (pauseMenuOptions[pauseMenuSelection]) {
					case "Resume" -> {
						showCountdown = true;
						countdownStartTime = System.currentTimeMillis();
						isPaused = false;
					}
					case "Help" -> {
						showHelp = true;
					}
					case "Quit" -> System.exit(0);
				}
			}
			return;
		}

		switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				leftHeld = true;
				leftHeldTime = 0;
				moveLeft();
				break;
			case KeyEvent.VK_RIGHT:
				rightHeld = true;
				rightHeldTime = 0;
				moveRight();
				break;
			case KeyEvent.VK_DOWN:
				softDropping = true;
				// one immediate soft drop
				if (!isLanded()) {
					pieceY++;
					fallTimer = 0;
				}
				break;
			case KeyEvent.VK_SPACE:
				// hard drop
				instantDrop();
				break;
			case KeyEvent.VK_UP:
				rotatePiece();
				break;
		}
	}

	// Handle key release inputs
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				leftHeld = false;
				break;
			case KeyEvent.VK_RIGHT:
				rightHeld = false;
				break;
			case KeyEvent.VK_DOWN:
				softDropping = false;
				break;
		}
	}
}
